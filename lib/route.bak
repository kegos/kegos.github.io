const express = require('express');
const dbConn = require('../common/connectdatabase.js');

const router = express.Router();



/** 루트 접속시 보여주는 화면 */
router.get('/', (req, res) => {
    res.status(200).json('Server on port 8080 and database is connected');
});

router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 사용자 이름 체크 */
router.post('/getusrname', (req, res) => {
    const uuid = req.body.uuid;

    var sql = "SELECT name FROM manager_tbl where uid = '" + uuid + "'";
    console.log(sql);
    dbConn.query(sql,function (err, results) {

        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results[0].name);
        } else {
            res.send('no');
        }
      }
    );
});


router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 주거 거래 완료 체크 */
router.post('/setstatushome', (req, res) => {
    const uuid = req.body.uuid;

    var sql = "UPDATE smile_home SET status = '완료' where id = '" + uuid + "'";
    console.log(sql);
    dbConn.query(sql,function (err, results) {

        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results[0].name);
        } else {
            res.send('no');
        }
      }
    );
});



router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 주거 거래 완료 체크 */
router.post('/updatelatlng', (req, res) => {
    const id = req.body.id;
    const lat = req.body.lat;
    const lng = req.body.lng;

    var sql = "UPDATE smile_home SET lng = " + lng + ",lat = " + lat + " where id = '" + id + "'";
    console.log(sql);
    dbConn.query(sql,function (err, results) {

        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results[0].name);
        } else {
            res.send('no');
        }
      }
    );
});


/** 주택 디테일 */
router.post('/homedetail', (req, res) => {
    const id = req.body.id;

    var sql = "SELECT * FROM smile_home where id = " + id;

    dbConn.query(sql,function (err, results) {

        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results);
        } else {
            res.send('no');
        }
      }
    );
});



/** Mysql 접속 테스트트 */
router.get('/test', (req, res) => {
    var rst = '';
    sql = "SELECT * FROM manager_tbl";

    dbConn.query(sql, function (err, results, fields) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        rst = results[0].name;
        res.send(rst + 'zzzz 개 피곤하다 진심');
      }
    );
});


router.use(express.json())
router.use(express.urlencoded({extended:false}))



/** 상가 디테일 */
router.post('/commdetail', (req, res) => {
    const id = req.body.id;

    var sql = "SELECT * FROM smile_business where id = " + id;


    dbConn.query(sql,function (err, results) {

        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results);
        } else {
            res.send('no');
        }
      }
    );
});




router.get('/regi_maxvalue', (req, res) => {
    var rst = '';
    sql = "select max(jeonse) as maxj,max(deposit) as maxd,max(salesprice) as maxs,max(monthly) as maxm,max(size) as maxz, ";
    sql += "MIN(NULLIF(jeonse, 0)) as minj,MIN(NULLIF(deposit, 0)) as mind,MIN(NULLIF(salesprice, 0)) as mins,MIN(NULLIF(monthly, 0)) as minm,MIN(size) as minz ";
    sql += "from smile_home where status = '진행'";

    dbConn.query(sql, function (err, results, fields) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        res.send(results);
      }
    );
});


router.get('/comm_maxvalue', (req, res) => {
    var rst = '';
    sql = "select max(entitleprice) as maxe,max(deposit) as maxd,max(salesprice) as maxs,max(monthly) as maxm,max(size) as maxz, ";
    sql += "MIN(NULLIF(entitleprice, 0)) as mine,MIN(NULLIF(deposit, 0)) as mind,MIN(NULLIF(salesprice, 0)) as mins,MIN(NULLIF(monthly, 0)) as minm,MIN(size) as minz ";
    sql += "from smile_business where progress = '진행'";

    dbConn.query(sql, function (err, results, fields) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        res.send(results);
      }
    );
});




router.use(express.json())
router.use(express.urlencoded({extended:false}))


/** 회원가입 */
router.post('/signup', (req, res) => {
    const name = req.body.name;
    const email = req.body.email;
    const uid = req.body.uid;


    var sql = "INSERT INTO manager_tbl (name, email, uid) VALUES ('" + name + "', '" + email + "', '" + uid + "')";

    dbConn.query(sql,function (err, results) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        res.send('회원가입 데이터 전달 성공');
      }
    );
});


/** 물건 리스트 */
router.post('/selected', (req, res) => {
    const gubun = req.body.gubun;
    const callname = req.body.callname;
    const minp = req.body.minp;
    const maxp = req.body.maxp;
    const maxp2 = req.body.maxp2;
    const minp2 = req.body.minp2;
    const mins = req.body.mins;
    const maxs = req.body.maxs;
    const roomcount = req.body.roomcount;


    var sql = "select id,type,status,addr,callname,sizetype,floor,totalfloor,room,bath,direction,indate,img1,"

    if (gubun == '전세') {
        sql += "jeonse as price from smile_home where status = '진행'   and jeonse <= " + maxp + " and jeonse >= " + minp +  " ";
    }
    else if (gubun == '월세') {
        sql += "deposit as price,monthly as price2 from smile_home where status = '진행' and monthly <= " + maxp2 + " and monthly >= " + minp2 +  " ";
        sql += "and deposit <= " + maxp + " and deposit >= " + minp +  " ";
    }
    else if (gubun == '매매') {
        sql += "salesprice as price from smile_home where status = '진행' and salesprice <= " + maxp + " and salesprice >= " + minp +  " ";
    }

    if (roomcount != '0') {
        if (roomcount == '4') {
            sql += "and room >= " + roomcount + " ";
        }  else {
            sql += "and room = " + roomcount + " ";
        }
    }


    if (callname.trim() != '') {
        sql += "and (callname like '%" + callname.trim() + "%' OR addr like '%" + callname.trim() + "%') ";
    }
    sql += "and size >= " + mins + " and size <= " + maxs  + " ";
    sql += " order by salesprice,jeonse,deposit,monthly desc";

    console.log(sql);

    dbConn.query(sql,function (err, results) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results);
        } else {
            res.send([]);
        }
      }
    );
});


router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 관심 물건 리스트 */
router.post('/baskethome', (req, res) => {
    const ids = req.body.ids;

    var sql = "select id,type,callname,sizetype,floor,room,bath,direction,indate,img1,deposit as price,monthly as price2,salesprice as price3,jeonse as price4 from smile_home where id in (" ;

    sql = sql + ids.replace('{','').replace('}','') +  ") order by salesprice,jeonse,deposit,monthly desc";


    console.log(sql);

    dbConn.query(sql,function (err, results) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results);
        } else {
            res.send([]);
        }
      }
    );
});



router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 물건 리스트 */
router.post('/commselected', (req, res) => {
    const gubun = req.body.gubun;
    const callname = req.body.callname;
    const minp = req.body.minp;
    const maxp = req.body.maxp;
    const maxp2 = req.body.maxp2;
    const minp2 = req.body.minp2;
    const mins = req.body.mins;
    const maxs = req.body.maxs;


    var sql = "select id,type,division,size,floor,addr,entitleprice,eliv,parking,img_1,"

    if (gubun == '월세') {
        sql += "deposit as price,monthly as price2 from smile_business where progress = '진행' and monthly <= " + maxp2 + " and monthly >= " + minp2 +  " ";
        sql += "and deposit <= " + maxp + " and deposit >= " + minp +  " ";
    }
    else  {
        sql += "salesprice as price from smile_business where progress = '진행' and salesprice <= " + maxp + " and salesprice >= " + minp +  " ";
    }
    if (callname.trim() != '') {
        sql += "and (division like '%" + callname.trim() + "%' OR addr like '%" + callname.trim() + "%')";
    }
    sql += "and size >= " + mins + " and size <= " + maxs  + " ";
    sql += " order by salesprice,deposit,monthly,entitleprice desc";

    console.log(sql);

    dbConn.query(sql,function (err, results) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        if(results.length > 0) {
            res.send(results);
        } else {
            res.send([]);
        }
      }
    );
});

router.use(express.json())
router.use(express.urlencoded({extended:false}))

/** 물건 리스트 */
router.post('/newasset', (req, res) => {
    const callname = req.body.callname;
    const addr = req.body.addr1;
    const addr2 = req.body.addr2;
    const size = req.body.size;
    const sizetype = req.body.sizetype;
    const indate = req.body.indate;
    const indatetype = req.body.indatetype;
    const floor = req.body.floor;
    const totalfloor = req.body.totalfloor;
    const room = req.body.room;
    const bath = req.body.bath;
    const direction = req.body.direction;
    const name1 = req.body.name1;
    const name2 = req.body.name2;
    const phone1 = req.body.phone1;
    const phone2 = req.body.phone2;
    const sales = req.body.sales;
    const jeonse = req.body.jeonse;
    const deposit = req.body.deposit;
    const monthly   = req.body.monthly;
    const loan  = req.body.loan;
    const currentdeposit = req.body.depositnow;
    const currentmonthly = req.body.monthlynow;
    const description = req.body.desc;
    const date = req.body.date;
    const type = req.body.type;

    sql = "INSERT INTO smile_home (callname,date,addr,addr2,type,size,sizetype,indate,indatetype,floor,totalfloor,room,bath,direction,name1,name2,phone1,phone2,salesprice,jeonse,deposit,monthly,loan,currentdeposit,currentmonthly,status,description)"
    sql = sql += " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

    params = [
        callname,
        date,
        addr,
        addr2 ? addr2 : '',
        type,
        size ? parseInt(size) : 0,
        sizetype ? sizetype : '',
        indate,
        indatetype,
        floor ? parseInt(floor) : 0,
        totalfloor ? parseInt(totalfloor) : 0,
        room ? parseInt(room) : 0,
        bath ? parseInt(bath) : 0,
        direction,
        name1,
        name2   ? name2 : '',
        phone1,
        phone2 ? parseInt(phone2) : '',
        sales  ? parseInt(sales) : 0,
        jeonse ? parseInt(jeonse) : 0,
        deposit ? parseInt(deposit) : 0,
        monthly ? parseInt(monthly) : 0,
        loan ? parseInt(loan) : 0,
        currentdeposit ? parseInt(currentdeposit) : 0,
        currentmonthly ? parseInt(currentmonthly) : 0,
        '진행',
        description ? description : '',
    ];


    dbConn.query(sql,params,function (err, results) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        res.send(results);
      }
    );
});








/*
select callname,sizetype,floor,room,bath,direction,jeonse,indate from smile_home
*/

/** Mysql 접속 테스트트 */
router.get('/list', (req, res) => {
    var rst = '';
    sql = "select id,callname,sizetype,floor,room,bath,direction,jeonse,indate,img1 from smile_home where id > 200 and id < 250";

    dbConn.query(sql, function (err, results, fields) {
        if (err) {
            console.log(err);
            res.send('db error');
        }
        console.log(results);
        res.send(results);
      }
    );
});


module.exports = router;